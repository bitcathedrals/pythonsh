if [[ -f \$HOME/homebrew/bin/brew ]]
then
    eval "\$(\$HOME/homebrew/bin/brew shellenv)"
else
   which brew >/dev/null 2>&1 && eval "\$(brew shellenv)"
fi

test -z "$ZSHRC_CUSTOM_LOADED" -a -f $HOME/.zshrc.custom && source $HOME/.zshrc.custom

DEFAULT_PYPENV="$HOME/.pyenv/"

if ! command -v pyenv >/dev/null 2>&1
then
  test -z "${PYENV_ROOT}" || export PYENV_ROOT="$DEFAULT_PYENV"
  export PATH="$PATH:$PYENV_ROOT/bin"
fi

eval "$(pyenv init -)"

test -f $HOME/.zshrc.prompt && source $HOME/.zshrc.prompt

function deactivate_if_needed {
  ver=\$(pyenv version)

  echo "$ver" | cut -d ' ' -f 1 | grep -v 'system' || return 0

  if ! pyenv deactivate
  then
    echo "deactive of $ver failed!"
    return 1
  fi

  return 0
}

function load_python_sh {
  if test -f python.sh
  then
    source python.sh
  else
    echo "can\'t find python.sh - are you in the project root?"
    return 1
  fi

  return 0
}

function switch_to_virtual {
  environment=$1

  type=$(echo "$1" | cut -d ':' -f 1)
  name=$(echo "$1" | cut -d ':' -f 2)

  if [[ $type == "project" ]]
  then
    load_python_sh || return 1
    virt="${VIRTUAL_PREFIX}_${name}"
  else
    virt="${name}"
  fi

  deactivate_if_needed || return 1

  echo -n ">>>switching to: ${virt}..."

  if pyenv activate "${virt}"
  then
    echo "completed."
  else
    echo "FAILED!"
    return 1
  fi

  return 0
}

function switch_dev {
  if switch_to_virtual "project:dev" || return 1
  return 0
}

function switch_test {
  if switch_to_virtual "project:test" || return 1
  return 0
}

function switch_release {
  if switch_to_virtual "project:release" || return 1
  return 0
}

function switch_global {
  if [[ -z \$1 ]]
  then
    echo "you need to specify a virtual environment to switch to as the sole argument"
    return 1
  fi

  switch_to_virtual "global:${1}" || return 1

  return 0
}

