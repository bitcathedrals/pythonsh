test -z "$ZSHRC_CUSTOM_LOADED" && source $HOME/.zshrc.custom

test -f $HOME/.zshrc.prompt && source $HOME/.zshrc.prompt

function deactivate_if_needed {
  ver=$(pyenv version)

  echo "$ver" | cut -d ' ' -f 1 | grep -v 'system' || return 0

  eval $(pyenv-sh-deactivate "${virt}")
  return $?
}

function load_python_sh {
  if test -f python.sh
  then
    source python.sh
  else
    echo >/dev/stderr "pythonsh zshrc: can\'t find python.sh - are you in the project root?"
    return 1
  fi

  return 0
}

function switch_to_virtual {
  environment=$1

  type=$(echo "$1" | cut -d ':' -f 1)
  name=$(echo "$1" | cut -d ':' -f 2)

  if [[ $type == "project" ]]
  then
    load_python_sh || return 1
    virt="${VIRTUAL_PREFIX}_${name}"
  else
    virt="${name}"
  fi

  deactivate_if_needed || return 1

  echo >/dev/stderr -n ">>>switching to: ${virt}..."

  if eval $(pyenv-sh-activate "${virt}")
  then
    echo "completed."
  else
    echo >/dev/stderr "pythonsh zshrc: switch to ${virt} FAILED!"
    return 1
  fi

  return 0
}

function switch_dev {
  if switch_to_virtual "project:dev" || return 1
  return 0
}

function switch_test {
  if switch_to_virtual "project:test" || return 1
  return 0
}

function switch_build {
  if switch_to_virtual "project:build" || return 1
  return 0
}

function switch_release {
  if switch_to_virtual "project:release" || return 1
  return 0
}

function switch_global {
  if [[ -z $1 ]]
  then
    echo "you need to specify a virtual environment to switch to as the sole argument"
    return 1
  fi

  switch_to_virtual "global:${1}" || return 1

  return 0
}

# git

alias status='git status'
alias diff='git diff'
alias stat='git diffstat'
alias commit='git commit'
alias ff='git pull'
alias pull='git pull --no-ff'
alias push='git push'
alias add='git add'
alias co='git checkout'
alias branch='git branch'
alias merge='git merge --no-ff'
alias revert='git checkout'


# rsync

function syncer {
  dry_run=""

  source=$1

  if [[ "$source" == "-n" ]]
  then
    dry_run="-n"

    shift
    source=$1
  fi

  remote=$2

  if [[ -z "$source" ]]
  then
    echo >/dev/stderr "syncer: source directory not given"
  fi

  if [[ ! -d "$source" ]]
  then
    echo >/dev/stderr "syncer: source directory does not exist or is not a directory"
  fi

  if [[ -z "$remote" ]]
  then
    echo >/dev/stderr "syncer: host not given"
  fi

  echo "rsync $dry_run --delete-after -arP $source $remote"
  rsync "$dry_run" --delete-after -arP "$source" "$remote"
}

# reverse engineer

# use strings

if [[ `uname` == "Darwin" ]]
then
  alias ldd='otool -L'
  alias llvm-dis-all='objdump --disassemble-all --line-numbers --x86-asm-syntax=intel'
  alias llvm-dis='objdump -d'
  alias llvm-dis-sym'objdump --line-numbers --x86-asm-syntax=intel disassemble='

  alias llvm-list-sym='objdump -t'
  alias llvm-list-dyn='objdump --dynamic-syms --show-all-symbols --demangle'

  alias gnu-dis-all='gobjdump --disassemble-all'
  alias gnu-dis='--disassemble'
  alias gnu-dis-sym='--disassemble='

  alias gnu-list-sym='gobjdump -t'
  alias gnu-list-dyn='gobdump -T'
fi

# ssh

alias ssh-master='ssh -Nf'

# tmux

alias t-reload='tmux source-file ~/.tmux.conf'

alias ta='tmux attach-session'
alias tl='tmux list-sessions'
alias tn='tmux new-session -s'
