function set_macos_path_helper {
  # this sets up macos path from /etc/path.d plus manpages
  helper=/usr/libexec/path_helper

  if [[ -x $helper ]]
  then
    eval "$($helper)"
  fi
}

function set_homebrew {
  # brew can be in three different locations

  if [[ -d $HOME/homebrew ]]
  then
    eval $($HOME/homebrew/bin/brew shellenv)
    return
  fi

  if [[ -x /usr/local/bin/brew ]]
  then
    eval $(/usr/local/bin/brew shellenv)
    return
  fi

  if [[ -d /opt/homebrew/ ]]
  then
    eval $(/opt/homebrew/bin/brew shellenv)
    return
  fi

  command -v brew >/dev/null 2>&1 && eval `brew shellenv`
  return 0
}

function unique_path {
  tac=/usr/local/bin/tac
  if [[ ! -e $tac ]]
  then
    tac=/usr/bin/tac
  fi

  reversed_list=$(echo $PATH | /usr/bin/tr -s ":" | /usr/bin/tr -s ":" "\n" | $tac)

  final=""

  for path in $(echo $reversed_list | sed '/^$/d')
  do
    removed=$(echo $removed | /usr/bin/tail -n +1)

    if echo "$removed" | /usr/bin/grep $path - >/dev/null 2>&1
    then
      echo /dev/stderr "unique_path - skipping: $path"
    else
#      echo /dev/stderr "unique_path - adding: $path"
      final="$path:$final"
    fi
  done

  PATH=$(echo "$final" | /usr/bin/tr "\n" ":" | /usr/bin/tr -s ":")
  export PATH
}

function set_editor {
  EDITOR=/Applications/Emacs.app/Contents/MacOS/bin/emacsclient

  if [[ -x $EDITOR ]]
  then
    export EDITOR
    return 0
  fi

  if command -v emacsclient >/dev/null 2>&1
  then
    export EDITOR=emacsclient
    return 0
  fi

  if command -v nano >/dev/null 2>&1
  then
    export EDITOR=nano
    return 0
  fi

  echo >/dev/stderr "WARNING: zshrc.custom no editor found!"
  return 1
}

function launch_ssh_agent {
  if [[ `uname` == "Darwin" ]]
  then
    return
  fi

  if [[ $TERM == "eterm-color" ]]
  then
    return
  fi

  if [[ -n "$SSH_CLIENT" ]]
  then
    return
  fi

  if [[ -z "$SSH_AGENT_PID" ]]
  then
    echo "ssh-agent: no SSH env var - starting a new ssh-agent."
    eval $(ssh-agent -s)
  else
    if kill -0 $SSH_AGENT_PID >/dev/null 2>&1
    then
      return
    else
      echo >/dev/stderr "ssh-agent: dead agent - starting a new ssh-agent."
      eval $(ssh-agent -s)
    fi
  fi
}

function set_pyenv {
  export TOOLS=$HOME/tools
  export PYENV_ROOT="$TOOLS/pyenv"

  PATH="$PYENV_ROOT/bin:$PATH"
  PATH="$PYENV_ROOT/libexec:$PATH"
  PATH="$TOOLS/pyenv-virtual/bin:$PATH"

  # just in case init needs some paths
  export PATH

  eval "$(pyenv init -)"
}

set_macos_path_helper
set_homebrew
set_pyenv

PATH="$TOOLS/local/bin:$PATH"
PATH="$HOME/code/utilities/bin:$PATH"
PATH="$HOME/code/security/bin:$PATH"
PATH="$HOME/code/pythonsh/bin:$PATH"
PATH="$HOME/code/docker/bin:$PATH"
PATH="$HOME/code/grail/bin:$PATH"

unique_path

set_editor

launch_ssh_agent

# if there is a file for crypto keys then add it
if [[ -f $HOME/.crypto.sh ]]
then
  source $HOME/.crypto.sh
fi

export ZSHRC_CUSTOM_LOADED="yes"
